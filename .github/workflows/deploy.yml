name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  install-deps:
    name: Install Dependencies (Cache Lookup Only)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/configure-nodejs
        with:
          lookup-only: 'true'

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: install-deps
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/configure-nodejs
      - name: Build
        run: npm run build
      - name: Package the Construct
        run: |
          npm run compile -w packages/cdk-construct
          npm run post-compile -w packages/cdk-construct
          npm run test -w packages/cdk-construct
          npm run package -w packages/cdk-construct
      - name: Upload cdk-construct-package artifact
        uses: actions/upload-artifact@v4
        with:
          name: cdk-construct-package
          path: packages/cdk-construct/dist/js/*.tgz

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      id-token: write
    concurrency:
      group: deploy-${{ github.workflow }}-${{ github.event.pull_request.number || 'main' }}
      cancel-in-progress: false
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/configure-nodejs
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/builder-writeRole
          aws-region: us-east-2

      - name: Build
        run: |
          npm run build

      - name: Deploy CDK Stack (Main)
        if: github.ref == 'refs/heads/main'
        run: |
          npx cdk deploy crush-test --require-approval never --outputs-file cdk-outputs.json

      - name: Deploy CDK Stack (PR)
        if: github.event_name == 'pull_request'
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          npx cdk deploy crush-test-pr-${PR_NUMBER} --require-approval never --outputs-file cdk-outputs.json

      - name: Determine Lambda Name
        id: lambda-name
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "lambda_name=crush-test-lambda" >> $GITHUB_OUTPUT
          else
            echo "lambda_name=crush-test-lambda-pr-${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          fi

      - name: Smoke Check
        run: |
          aws lambda invoke --cli-read-timeout 120 --function-name ${{ steps.lambda-name.outputs.lambda_name }} --payload '{"tool":"oha","labels":{"test":"oha","type":"ping-c20-z10s"},"args":["--no-tui","-j","-c","20","-z","10s","https://lambdadispatch.ghpublic.pwrdrvr.com/ping"]}' --cli-binary-format raw-in-base64-out response.json
          cat response.json
          cat response.json | jq .
          STATUS_CODE=$(cat response.json | jq -r '.statusCode')
          if [ "$STATUS_CODE" != "200" ]; then
            echo "Smoke check failed: statusCode=$STATUS_CODE"
            exit 1
          fi

      - name: Upload smoke check response.json
        uses: actions/upload-artifact@v4
        with:
          name: smoke-check-response
          path: response.json

  deploy-packaged:
    name: Deploy Packaged
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      id-token: write
    concurrency:
      group: deploy-packaged-${{ github.workflow }}-${{ github.event.pull_request.number || 'main' }}
      cancel-in-progress: false
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    steps:
      - name: Checkout CDK only (sparse)
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            cdk-consumer-test
          sparse-checkout-cone-mode: false

      - name: Download cdk-construct-package artifact
        uses: actions/download-artifact@v4
        with:
          name: cdk-construct-package
          path: cdk-consumer-test

      - name: Install packaged construct
        working-directory: cdk-consumer-test
        run: |
          npm install ./crush-test-cdk*.tgz

      - name: Build
        working-directory: cdk-consumer-test
        run: |
          npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/builder-writeRole
          aws-region: us-east-2

      - name: Deploy CDK Stack (Main)
        if: github.ref == 'refs/heads/main'
        working-directory: cdk-consumer-test
        run: |
          npx cdk deploy crush-test-construct-test --require-approval never --outputs-file cdk-outputs.json

      - name: Deploy CDK Stack (PR)
        if: github.event_name == 'pull_request'
        working-directory: cdk-consumer-test
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          npx cdk deploy crush-test-construct-test-pr-${PR_NUMBER} --require-approval never --outputs-file cdk-outputs.json

      - name: Determine Lambda Name
        id: lambda-name
        working-directory: cdk-consumer-test
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "lambda_name=crush-test-construct-test-lambda" >> $GITHUB_OUTPUT
          else
            echo "lambda_name=crush-test-construct-test-lambda-pr-${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          fi

      - name: Smoke Check
        working-directory: cdk-consumer-test
        run: |
          aws lambda invoke --cli-read-timeout 120 --function-name ${{ steps.lambda-name.outputs.lambda_name }} --payload '{"tool":"oha","labels":{"test":"oha","type":"ping-c20-z10s"},"args":["--no-tui","-j","-c","20","-z","10s","https://lambdadispatch.ghpublic.pwrdrvr.com/ping"]}' --cli-binary-format raw-in-base64-out response.json
          cat response.json
          cat response.json | jq .
          STATUS_CODE=$(cat response.json | jq -r '.statusCode')
          if [ "$STATUS_CODE" != "200" ]; then
            echo "Smoke check failed: statusCode=$STATUS_CODE"
            exit 1
          fi

      - name: Upload smoke check response.json
        uses: actions/upload-artifact@v4
        with:
          name: smoke-check-response
          path: response.json
